<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Patterns on COMP2511 Musings</title><link>/categories/design-patterns/</link><description>Recent content in Design Patterns on COMP2511 Musings</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Andrew Wong (z5206677)</copyright><lastBuildDate>Sun, 17 Nov 2019 20:52:39 +1100</lastBuildDate><atom:link href="/categories/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Visitor Pattern</title><link>/post/visitor-pattern/</link><pubDate>Sun, 17 Nov 2019 20:52:39 +1100</pubDate><guid>/post/visitor-pattern/</guid><description>Adds new operations and behaviours to existing objects without modifying them.</description></item><item><title>Singleton Pattern</title><link>/post/singleton-pattern/</link><pubDate>Sun, 17 Nov 2019 20:51:02 +1100</pubDate><guid>/post/singleton-pattern/</guid><description>Only allows one instance of the class to exist.</description></item><item><title>Builder Pattern</title><link>/post/builder-pattern/</link><pubDate>Sun, 17 Nov 2019 20:42:22 +1100</pubDate><guid>/post/builder-pattern/</guid><description>The builder pattern lets users construct complex objects step by step.</description></item><item><title>Abstract Factory Method</title><link>/post/abstract-factory-method/</link><pubDate>Sun, 17 Nov 2019 20:37:23 +1100</pubDate><guid>/post/abstract-factory-method/</guid><description>Similar to the factory method, the abstract factory method allows us produce families of related objects without needing to specify their concrete class.</description></item><item><title>Factory Method</title><link>/post/factory-method/</link><pubDate>Sun, 17 Nov 2019 20:23:36 +1100</pubDate><guid>/post/factory-method/</guid><description>Provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created</description></item><item><title>Adapter Pattern</title><link>/post/adapter-pattern/</link><pubDate>Wed, 13 Nov 2019 01:11:30 +1100</pubDate><guid>/post/adapter-pattern/</guid><description>The adapter pattern allows the interface of an existing class to be used as another interface for another class.</description></item><item><title>Decorator Pattern</title><link>/post/decorator-pattern/</link><pubDate>Wed, 13 Nov 2019 01:06:24 +1100</pubDate><guid>/post/decorator-pattern/</guid><description>The decorator pattern &amp;lsquo;decorates&amp;rsquo; additional functionality to an object during runtime.</description></item><item><title>Template Method Pattern</title><link>/post/template-pattern/</link><pubDate>Mon, 11 Nov 2019 23:21:00 +1100</pubDate><guid>/post/template-pattern/</guid><description>The Template Method pattern aims to encapsulate the &amp;ldquo;things that vary&amp;rdquo;, whilst outlining a common procedure.</description></item><item><title>Iterator Pattern</title><link>/post/iterator-pattern/</link><pubDate>Tue, 29 Oct 2019 16:31:24 +1100</pubDate><guid>/post/iterator-pattern/</guid><description>The iterator pattern provides a way to access the elements of an aggregate object, without needing to know its underlying mechanism</description></item><item><title>Composite Pattern</title><link>/post/composite-pattern/</link><pubDate>Tue, 15 Oct 2019 15:20:02 +1100</pubDate><guid>/post/composite-pattern/</guid><description>An object that contains other objects that behaves as if were those objects.</description></item><item><title>Observer Pattern</title><link>/post/observer-pattern/</link><pubDate>Wed, 09 Oct 2019 17:14:51 +1100</pubDate><guid>/post/observer-pattern/</guid><description>Event-Driven Programming An order-of-execution independent system (independent of time).</description></item><item><title>State Pattern</title><link>/post/state-pattern/</link><pubDate>Wed, 09 Oct 2019 16:22:47 +1100</pubDate><guid>/post/state-pattern/</guid><description>The same input can produce a different output, depending on the context/current state of the machine .</description></item><item><title>Strategy Pattern</title><link>/post/strategy-pattern/</link><pubDate>Tue, 08 Oct 2019 16:24:30 +1100</pubDate><guid>/post/strategy-pattern/</guid><description>The strategy method performs different functionality depending on its provided internals.</description></item></channel></rss>