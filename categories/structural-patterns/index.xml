<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Structural Patterns on COMP2511 Musings</title><link>/categories/structural-patterns/</link><description>Recent content in Structural Patterns on COMP2511 Musings</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Andrew Wong (z5206677)</copyright><lastBuildDate>Wed, 13 Nov 2019 01:11:30 +1100</lastBuildDate><atom:link href="/categories/structural-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Adapter Pattern</title><link>/post/adapter-pattern/</link><pubDate>Wed, 13 Nov 2019 01:11:30 +1100</pubDate><guid>/post/adapter-pattern/</guid><description>The adapter pattern allows the interface of an existing class to be used as another interface for another class.</description></item><item><title>Decorator Pattern</title><link>/post/decorator-pattern/</link><pubDate>Wed, 13 Nov 2019 01:06:24 +1100</pubDate><guid>/post/decorator-pattern/</guid><description>The decorator pattern &#39;decorates&#39; additional functionality to an object during runtime.</description></item><item><title>Composite Pattern</title><link>/post/composite-pattern/</link><pubDate>Tue, 15 Oct 2019 15:20:02 +1100</pubDate><guid>/post/composite-pattern/</guid><description>An object that contains other objects that behaves as if were those objects.</description></item></channel></rss>