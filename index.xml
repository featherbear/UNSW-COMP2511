<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>COMP2511 Musings</title><link>/</link><description>Recent content on COMP2511 Musings</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Andrew Wong (z5206677)</copyright><lastBuildDate>Sat, 30 Nov 2019 22:04:30 +1100</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Summary</title><link>/post/summary/</link><pubDate>Sat, 30 Nov 2019 22:04:30 +1100</pubDate><guid>/post/summary/</guid><description>Disclaimer: This is not a Java course</description></item><item><title>Visitor Pattern</title><link>/post/visitor-pattern/</link><pubDate>Sun, 17 Nov 2019 20:52:39 +1100</pubDate><guid>/post/visitor-pattern/</guid><description>Adds new operations and behaviours to existing objects without modifying them.</description></item><item><title>Singleton Pattern</title><link>/post/singleton-pattern/</link><pubDate>Sun, 17 Nov 2019 20:51:02 +1100</pubDate><guid>/post/singleton-pattern/</guid><description>Only allows one instance of the class to exist.</description></item><item><title>Builder Pattern</title><link>/post/builder-pattern/</link><pubDate>Sun, 17 Nov 2019 20:42:22 +1100</pubDate><guid>/post/builder-pattern/</guid><description>The builder pattern lets users construct complex objects step by step.</description></item><item><title>Abstract Factory Method</title><link>/post/abstract-factory-method/</link><pubDate>Sun, 17 Nov 2019 20:37:23 +1100</pubDate><guid>/post/abstract-factory-method/</guid><description>Similar to the factory method, the abstract factory method allows us produce families of related objects without needing to specify their concrete class.</description></item><item><title>Factory Method</title><link>/post/factory-method/</link><pubDate>Sun, 17 Nov 2019 20:23:36 +1100</pubDate><guid>/post/factory-method/</guid><description>Provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created</description></item><item><title>Assignment Two - Dungeon Game</title><link>/post/assign2/</link><pubDate>Sun, 17 Nov 2019 19:30:31 +1100</pubDate><guid>/post/assign2/</guid><description>GitHub</description></item><item><title>Assignment Two - User Stories (rev 3)</title><link>/post/assign2-stories-3/</link><pubDate>Sun, 17 Nov 2019 16:33:30 +1100</pubDate><guid>/post/assign2-stories-3/</guid><description>1 point = 2 hours</description></item><item><title>Code Smells</title><link>/post/code-smells/</link><pubDate>Wed, 13 Nov 2019 01:15:51 +1100</pubDate><guid>/post/code-smells/</guid><description>Bloaters - Code, methods and classes that are too big.</description></item><item><title>Adapter Pattern</title><link>/post/adapter-pattern/</link><pubDate>Wed, 13 Nov 2019 01:11:30 +1100</pubDate><guid>/post/adapter-pattern/</guid><description>The adapter pattern allows the interface of an existing class to be used as another interface for another class.</description></item><item><title>Decorator Pattern</title><link>/post/decorator-pattern/</link><pubDate>Wed, 13 Nov 2019 01:06:24 +1100</pubDate><guid>/post/decorator-pattern/</guid><description>The decorator pattern &amp;lsquo;decorates&amp;rsquo; additional functionality to an object during runtime.</description></item><item><title>Model-View-Controller</title><link>/post/mvc/</link><pubDate>Wed, 13 Nov 2019 01:02:23 +1100</pubDate><guid>/post/mvc/</guid><description>Read here: featherbear.</description></item><item><title>User Centred Design</title><link>/post/user-centred-design/</link><pubDate>Wed, 13 Nov 2019 00:57:46 +1100</pubDate><guid>/post/user-centred-design/</guid><description>TL;DR We write software to be USED by people, not for machines to use.</description></item><item><title>Comparing</title><link>/post/comparing/</link><pubDate>Wed, 13 Nov 2019 00:41:48 +1100</pubDate><guid>/post/comparing/</guid><description>java.</description></item><item><title>Template Method Pattern</title><link>/post/template-pattern/</link><pubDate>Mon, 11 Nov 2019 23:21:00 +1100</pubDate><guid>/post/template-pattern/</guid><description>The Template Method pattern aims to encapsulate the &amp;ldquo;things that vary&amp;rdquo;, whilst outlining a common procedure.</description></item><item><title>JavaFX Property Wrappers</title><link>/post/javafx-property/</link><pubDate>Fri, 08 Nov 2019 13:26:06 +1100</pubDate><guid>/post/javafx-property/</guid><description>JavaFX provides functionality to listen to changes of our primitive data types (int, boolean, etc).</description></item><item><title>The `this` keyword</title><link>/post/this/</link><pubDate>Fri, 08 Nov 2019 13:26:06 +1100</pubDate><guid>/post/this/</guid><description>In objected oriented (OO) design, objects are aware of the contents inside of themselves.</description></item><item><title>Generics</title><link>/post/generics/</link><pubDate>Tue, 29 Oct 2019 16:35:39 +1100</pubDate><guid>/post/generics/</guid><description>Generics enable types (That is, both classes and interfaces) to be parameters of class, interface and method definitions</description></item><item><title>Iterator Pattern</title><link>/post/iterator-pattern/</link><pubDate>Tue, 29 Oct 2019 16:31:24 +1100</pubDate><guid>/post/iterator-pattern/</guid><description>The iterator pattern provides a way to access the elements of an aggregate object, without needing to know its underlying mechanism</description></item><item><title>JUnit Testing</title><link>/post/junit/</link><pubDate>Tue, 29 Oct 2019 16:00:28 +1100</pubDate><guid>/post/junit/</guid><description>TL;DR: Testing is important!</description></item><item><title>Assignment Two - User Stories (rev 1)</title><link>/post/assign2-stories-1/</link><pubDate>Thu, 24 Oct 2019 10:54:30 +1100</pubDate><guid>/post/assign2-stories-1/</guid><description>Epic Stories As a player I want to interact with the game to complete the level and win.</description></item><item><title>Exceptions</title><link>/post/exceptions/</link><pubDate>Tue, 22 Oct 2019 14:10:36 +1100</pubDate><guid>/post/exceptions/</guid><description>Exceptions are useful to programmatically handle both foreseen, and (somewhat) unforeseen errors.</description></item><item><title>Composite Pattern</title><link>/post/composite-pattern/</link><pubDate>Tue, 15 Oct 2019 15:20:02 +1100</pubDate><guid>/post/composite-pattern/</guid><description>An object that contains other objects that behaves as if were those objects.</description></item><item><title>Observer Pattern</title><link>/post/observer-pattern/</link><pubDate>Wed, 09 Oct 2019 17:14:51 +1100</pubDate><guid>/post/observer-pattern/</guid><description>Event-Driven Programming An order-of-execution independent system (independent of time).</description></item><item><title>State Pattern</title><link>/post/state-pattern/</link><pubDate>Wed, 09 Oct 2019 16:22:47 +1100</pubDate><guid>/post/state-pattern/</guid><description>The same input can produce a different output, depending on the context/current state of the machine .</description></item><item><title>Strategy Pattern</title><link>/post/strategy-pattern/</link><pubDate>Tue, 08 Oct 2019 16:24:30 +1100</pubDate><guid>/post/strategy-pattern/</guid><description>The strategy method performs different functionality depending on its provided internals.</description></item><item><title>Switch to Polymorphism!</title><link>/post/switch-polymorphism/</link><pubDate>Sun, 06 Oct 2019 22:44:19 +1100</pubDate><guid>/post/switch-polymorphism/</guid><description>Consider the code from assignment one</description></item><item><title>SOLID</title><link>/post/solid/</link><pubDate>Sun, 06 Oct 2019 21:26:06 +1100</pubDate><guid>/post/solid/</guid><description>SOLID Single responsibility principle A class should only have one responsibility</description></item><item><title>Good Software Design</title><link>/post/good-software-design/</link><pubDate>Sun, 06 Oct 2019 21:02:03 +1100</pubDate><guid>/post/good-software-design/</guid><description>Good Software Design Software will always change.</description></item><item><title>Interfaces</title><link>/post/interfaces/</link><pubDate>Sun, 06 Oct 2019 20:44:14 +1100</pubDate><guid>/post/interfaces/</guid><description>Interfaces Interfaces are groups of functions that can be assigned to classes of similar behaviour, but whose inherited classes are different.</description></item><item><title>Domain Modelling</title><link>/post/domain-modelling/</link><pubDate>Sun, 06 Oct 2019 20:27:11 +1100</pubDate><guid>/post/domain-modelling/</guid><description>Continuing on from COMP1531</description></item><item><title>Inheritance</title><link>/post/inheritance/</link><pubDate>Sun, 06 Oct 2019 20:18:37 +1100</pubDate><guid>/post/inheritance/</guid><description>Inheritance in OOP Inheritance is a programming concept where new classes can use existing attributes and methods from other classes.</description></item><item><title>Abstract Classes</title><link>/post/abstract-classes/</link><pubDate>Sun, 06 Oct 2019 20:17:01 +1100</pubDate><guid>/post/abstract-classes/</guid><description>Abstract Classes Abstract classes are classes than cannot be instantiated.</description></item><item><title>Language Basics</title><link>/post/language-basics/</link><pubDate>Sun, 06 Oct 2019 20:16:19 +1100</pubDate><guid>/post/language-basics/</guid><description>Language Basics Control Structures Loops If-else Switch Same as C!</description></item><item><title>Relationships</title><link>/post/relationships/</link><pubDate>Sun, 06 Oct 2019 20:00:27 +1100</pubDate><guid>/post/relationships/</guid><description>Containment Relationships Uses No ownership between classes, and they have their own lifetimes</description></item><item><title>Packages</title><link>/post/packages/</link><pubDate>Sun, 06 Oct 2019 19:55:35 +1100</pubDate><guid>/post/packages/</guid><description>Java packages are groups of classes that help to manage your code base.</description></item><item><title>Javadocs</title><link>/post/javadocs/</link><pubDate>Sun, 06 Oct 2019 19:42:52 +1100</pubDate><guid>/post/javadocs/</guid><description>There are three types of code documentation:</description></item><item><title>&lt;Object&gt;.equals</title><link>/post/object.equals/</link><pubDate>Wed, 25 Sep 2019 16:11:23 +1000</pubDate><guid>/post/object.equals/</guid><description>The &amp;lt;Object&amp;gt;.</description></item><item><title>&lt;Object&gt;.toString</title><link>/post/object.tostring/</link><pubDate>Wed, 25 Sep 2019 16:11:23 +1000</pubDate><guid>/post/object.tostring/</guid><description>The &amp;lt;Object&amp;gt;.</description></item><item><title>Dynamic Binding</title><link>/post/dynamic-binding/</link><pubDate>Wed, 25 Sep 2019 16:11:23 +1000</pubDate><guid>/post/dynamic-binding/</guid><description>In a very simple sense, when a piece of code is compiled, the compiler sets up all the information that it knows.</description></item><item><title>Assignment One - Booking System</title><link>/post/assign1/</link><pubDate>Mon, 23 Sep 2019 11:54:41 +1000</pubDate><guid>/post/assign1/</guid><description>We were given an assignment, to implement the backend of a simple venue hiring system.</description></item><item><title>Access Modifiers</title><link>/post/access-modifiers/</link><pubDate>Thu, 19 Sep 2019 11:29:29 +1000</pubDate><guid>/post/access-modifiers/</guid><description>In the nature of Object Oriented Programming, attributes and methods can be assigned different access levels, exposing themselves to other classes.</description></item><item><title>Classes</title><link>/post/java-classes/</link><pubDate>Thu, 19 Sep 2019 11:28:25 +1000</pubDate><guid>/post/java-classes/</guid><description>In Object-Oriented Programming, programmers focus on user-defined data types called classes.</description></item><item><title>Hello, World!</title><link>/post/hello-world/</link><pubDate>Tue, 17 Sep 2019 15:19:07 +1000</pubDate><guid>/post/hello-world/</guid><description>1 2 3 4 5 public class HelloWorld { public static void main(String[] args) { System.</description></item><item><title>Java Introduction</title><link>/post/java-introduction/</link><pubDate>Tue, 17 Sep 2019 15:13:25 +1000</pubDate><guid>/post/java-introduction/</guid><description>Java Is Platform Independent Common compilers translate source code into platform-specific code (specific to the processor on that computer (ARM, x86, x64, MIPS, etc).</description></item><item><title>Assignment Two - User Stories (rev 2)</title><link>/post/assign2-stories-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/post/assign2-stories-2/</guid><description>Epic Stories As a player I want to explore the game world to feel accomplished As a player I want to face enemies and fight them to challenge my skills and have fun.</description></item></channel></rss>