<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>COMP2511 Musings</title><link>/</link><description>Recent content on COMP2511 Musings</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Andrew Wong (z5206677)</copyright><lastBuildDate>Sun, 06 Oct 2019 22:44:19 +1100</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Switch to Polymorphism!</title><link>/post/switch-polymorphism/</link><pubDate>Sun, 06 Oct 2019 22:44:19 +1100</pubDate><guid>/post/switch-polymorphism/</guid><description>Consider the code from assignment one</description></item><item><title>SOLID</title><link>/post/solid/</link><pubDate>Sun, 06 Oct 2019 21:26:06 +1100</pubDate><guid>/post/solid/</guid><description>SOLID Single responsibility principle A class should only have one responsibility</description></item><item><title>Good Software Design</title><link>/post/good-software-design/</link><pubDate>Sun, 06 Oct 2019 21:02:03 +1100</pubDate><guid>/post/good-software-design/</guid><description>Good Software Design Software will always change.</description></item><item><title>Interfaces</title><link>/post/interfaces/</link><pubDate>Sun, 06 Oct 2019 20:44:14 +1100</pubDate><guid>/post/interfaces/</guid><description>Interfaces Interfaces are groups of functions that can be assigned to classes of similar behaviour, but whose inherited classes are different.</description></item><item><title>Domain Modelling</title><link>/post/domain-modelling/</link><pubDate>Sun, 06 Oct 2019 20:27:11 +1100</pubDate><guid>/post/domain-modelling/</guid><description>Continuing on from COMP1531</description></item><item><title>Inheritance</title><link>/post/inheritance/</link><pubDate>Sun, 06 Oct 2019 20:18:37 +1100</pubDate><guid>/post/inheritance/</guid><description>Inheritance in OOP Inheritance is a programming concept where new classes can use existing attributes and methods from other classes.</description></item><item><title>Abstract Classes</title><link>/post/abstract-classes/</link><pubDate>Sun, 06 Oct 2019 20:17:01 +1100</pubDate><guid>/post/abstract-classes/</guid><description>Abstract Classes Abstract classes are classes than cannot be instantiated.</description></item><item><title>Language Basics</title><link>/post/language-basics/</link><pubDate>Sun, 06 Oct 2019 20:16:19 +1100</pubDate><guid>/post/language-basics/</guid><description>Language Basics Control Structures Loops If-else Switch Same as C!</description></item><item><title>Relationships</title><link>/post/relationships/</link><pubDate>Sun, 06 Oct 2019 20:00:27 +1100</pubDate><guid>/post/relationships/</guid><description>Containment Relationships Uses No ownership between classes, and they have their own lifetimes</description></item><item><title>Packages</title><link>/post/packages/</link><pubDate>Sun, 06 Oct 2019 19:55:35 +1100</pubDate><guid>/post/packages/</guid><description>Java packages are groups of classes that help to manage your code base.</description></item><item><title>Javadocs</title><link>/post/javadocs/</link><pubDate>Sun, 06 Oct 2019 19:42:52 +1100</pubDate><guid>/post/javadocs/</guid><description>There are three types of code documentation:</description></item><item><title>&lt;Object&gt;.equals</title><link>/post/object.equals/</link><pubDate>Wed, 25 Sep 2019 16:11:23 +1000</pubDate><guid>/post/object.equals/</guid><description>The &amp;lt;Object&amp;gt;.</description></item><item><title>&lt;Object&gt;.toString</title><link>/post/object.tostring/</link><pubDate>Wed, 25 Sep 2019 16:11:23 +1000</pubDate><guid>/post/object.tostring/</guid><description>The &amp;lt;Object&amp;gt;.</description></item><item><title>Dynamic Binding</title><link>/post/dynamic-binding/</link><pubDate>Wed, 25 Sep 2019 16:11:23 +1000</pubDate><guid>/post/dynamic-binding/</guid><description>In a very simple sense, when a piece of code is compiled, the compiler sets up all the information that it knows.</description></item><item><title>Assignment One - Booking System</title><link>/post/assign1/</link><pubDate>Mon, 23 Sep 2019 11:54:41 +1000</pubDate><guid>/post/assign1/</guid><description>We were given an assignment, to implement the backend of a simple venue hiring system.</description></item><item><title>Access Modifiers</title><link>/post/access-modifiers/</link><pubDate>Thu, 19 Sep 2019 11:29:29 +1000</pubDate><guid>/post/access-modifiers/</guid><description>In the nature of Object Oriented Programming, attributes and methods can be assigned different access levels, exposing themselves to other classes.</description></item><item><title>Classes</title><link>/post/java-classes/</link><pubDate>Thu, 19 Sep 2019 11:28:25 +1000</pubDate><guid>/post/java-classes/</guid><description>In Object-Oriented Programming, programmers focus on user-defined data types called classes.</description></item><item><title>Hello, World!</title><link>/post/hello-world/</link><pubDate>Tue, 17 Sep 2019 15:19:07 +1000</pubDate><guid>/post/hello-world/</guid><description>1 2 3 4 5 public class HelloWorld { public static void main(String[] args) { System.</description></item><item><title>Java Introduction</title><link>/post/java-introduction/</link><pubDate>Tue, 17 Sep 2019 15:13:25 +1000</pubDate><guid>/post/java-introduction/</guid><description>Java Is Platform Independent Common compilers translate source code into platform-specific code (specific to the processor on that computer (ARM, x86, x64, MIPS, etc).</description></item></channel></rss>